@using System.Globalization
@using Helper.Image
<MudDialog>
    <DialogContent>
        <MudPaper Elevation="0">
            <MudTextField @bind-Value="Model.GameName" For="@(() => Model.GameName)"/>
            <MudTextField @bind-Value="Model.Vendor" For="@(() => Model.Vendor)"/>
            <MudTextField @bind-Value="Model.ExePath" For="@(() => Model.ExePath)"/>
            <MudDatePicker @bind-Value="Model.DateTime" For="@(() => Model.DateTime)" Editable="true" ImmediateText="true" Placeholder="yyyy/MM" DateFormat="yyyy/MM" TextChanged="DatePickerTextChanged" HelperText="@_bound" Clearable="true"/>
            <MudStack Row="true">
                <MudInputLabel Class="d-flex align-center">Color:</MudInputLabel>
                <MudPaper Outlined="true" id="cover-container">
                    <MudImage Height="130" Width="100" ObjectFit="ObjectFit.Contain" Src="@CoverPath"></MudImage>
                </MudPaper>
                <MudButton OnClick="UploadCover">Upload</MudButton>
            </MudStack>
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="OnSave">Save</MudButton>
        <MudButton OnClick="OnCancel">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [Parameter]
    public FormModel Model { get; set; } = new();

    private string? _bound = "not set";

    private string? CoverPath => ImageHelper.ImageFileToBase64(Model.Cover);

    [CascadingParameter]
    public MudDialogInstance? MudDialog { get; set; }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private void OnSave()
    {
        MudDialog?.Close(DialogResult.Ok(Model));
    }

    public class FormModel
    {
        [Label("Game name")]
        public string? GameName { get; set; }

        [Label("Vendor")]
        public string? Vendor { get; set; }

        [Label("Executable path")]
        public string? ExePath { get; set; }

        [Label("Date")]
        public DateTime? DateTime { get; set; }

        public string? Cover { get; set; }
    }

    private void DatePickerTextChanged(string? value)
    {
        if (value == null || value.Length < 6)
        {
            Model.DateTime = null;
        }
        else
        {
            string[] formats = ["yyyy/MM"];
            if (DateTime.TryParseExact(value, formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out var validDate))
            {
                Model.DateTime = validDate;
            }
            else
            {
                Model.DateTime = null;
            }
        }

        _bound = Model.DateTime.HasValue ? Model.DateTime.Value.ToString("yyyy/MM") : "not set";
    }

    private async Task UploadCover()
    {
        var options = new PickOptions
        {
            PickerTitle = "Please select cover image file",
            FileTypes = FilePickerFileType.Images
        };

        var result = await FilePicker.PickAsync(options);
        if (result == null)
        {
            return;
        }

        Model.Cover = result.FullPath;
        StateHasChanged();
    }

}

<style>
    .mud-card {
        width: 400px;
    }
</style>