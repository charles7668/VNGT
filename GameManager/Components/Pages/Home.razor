@page "/"
@using System.Diagnostics

<MudLayout Class="@("main-mud-layout")">
    <ActionBar id="main-toolbar" Class="@("main-toolbar")" AddNewGameEvent="AddNewGame" SearchEvent="FilterInfo"></ActionBar>
    <MudGrid>
        @foreach (var viewInfo in ViewGameInfos.Where(i => i.display))
        {
            <Card GameInfo="viewInfo.info" Class="card" Width="250px" Height="350px"></Card>
        }
    </MudGrid>
</MudLayout>

@code {
    private List<(GameInfo info, bool display)> ViewGameInfos { get; } = [];

    [Inject]
    private IDialogService? DialogService { get; set; }

    [Inject]
    private IConfigService? ConfigService { get; set; }

    private async Task AddNewGame(string exePath)
    {
        Debug.Assert(DialogService is not null);

        var inputModel = new DialogGameInfoEdit.FormModel
        {
            GameName = Path.GetFileName(Path.GetDirectoryName(exePath)) ?? "null",
            ExePath = exePath
        };
        var parameters = new DialogParameters<DialogGameInfoEdit>
        {
            { x => x.Model, inputModel }
        };
        var dialogReference = await DialogService.ShowAsync<DialogGameInfoEdit>("Add new game", parameters,
            new DialogOptions
            {
                BackdropClick = false
            });
        var dialogResult = await dialogReference.Result;
        if (dialogResult.Canceled)
            return;
        if (dialogResult.Data is not DialogGameInfoEdit.FormModel resultModel)
            return;
        var gameInfo = new GameInfo();
        Debug.Assert(ConfigService != null);
        if (resultModel.Cover != null)
        {
            try
            {
                resultModel.Cover = await ConfigService.AddCoverImage(resultModel.Cover);
            }
            catch (Exception e)
            {
                await DialogService.ShowMessageBox(
                    "Error",
                    $"{e.Message}"
                    , cancelText: "Cancel");
            }
        }

        DataMapService.Map(resultModel, gameInfo);
        ViewGameInfos.Add((gameInfo, true));
        StateHasChanged();
    }

    private void FilterInfo(string? pattern)
    {
        for (var i = 0; i < ViewGameInfos.Count; i++)
        {
            var viewInfo = ViewGameInfos[i];
            viewInfo.display = string.IsNullOrEmpty(pattern) ||
                               (viewInfo.info.GameName ?? "").ToLower().Contains(pattern.ToLower());
            ViewGameInfos[i] = viewInfo;
        }

        StateHasChanged();
    }

}

<style>
    .main-mud-layout {
        padding: 0px;
    }
    .main-mud-layout > .mud-grid {
        max-width: 100%;
        padding-left: 15px;
    }
    #main-toolbar{
        position: sticky; 
        top: 0;
        margin-bottom: 20px;
        margin-top: 0px;
        z-index: 999;
    }
    .card {
        margin: 5px;
    }
</style>